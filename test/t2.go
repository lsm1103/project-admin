// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/xm/Desktop/go_package/project-admin/common/mocks/tag_v2.go

// Package mock_mocks is a generated GoMock package.
package main

import (
	mocks "project-admin/common/mocks"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTags is a mock of Tags interface.
type MockTags struct {
	ctrl     *gomock.Controller
	recorder *MockTagsMockRecorder
}

// MockTagsMockRecorder is the mock recorder for MockTags.
type MockTagsMockRecorder struct {
	mock *MockTags
}

// NewMockTags creates a new mock instance.
func NewMockTags(ctrl *gomock.Controller) *MockTags {
	mock := &MockTags{ctrl: ctrl}
	mock.recorder = &MockTagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTags) EXPECT() *MockTagsMockRecorder {
	return m.recorder
}

// Char mocks base method.
func (m *MockTags) Char(column *mocks.Column) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Char", column)
	ret0, _ := ret[0].(string)
	return ret0
}

// Char indicates an expected call of Char.
func (mr *MockTagsMockRecorder) Char(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Char", reflect.TypeOf((*MockTags)(nil).Char), column)
}

// Phone mocks base method.
func (m *MockTags) Phone(column *mocks.Column) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Phone", column)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Phone indicates an expected call of Phone.
func (mr *MockTagsMockRecorder) Phone(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Phone", reflect.TypeOf((*MockTags)(nil).Phone), column)
}

// Uint mocks base method.
func (m *MockTags) Uint(column *mocks.Column) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uint", column)
	ret0, _ := ret[0].(int)
	return ret0
}

// Uint indicates an expected call of Uint.
func (mr *MockTagsMockRecorder) Uint(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uint", reflect.TypeOf((*MockTags)(nil).Uint), column)
}

// Uint64 mocks base method.
func (m *MockTags) Uint64(column *mocks.Column) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uint64", column)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Uint64 indicates an expected call of Uint64.
func (mr *MockTagsMockRecorder) Uint64(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uint64", reflect.TypeOf((*MockTags)(nil).Uint64), column)
}

// Uuid mocks base method.
func (m *MockTags) Uuid(column *mocks.Column) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uuid", column)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Uuid indicates an expected call of Uuid.
func (mr *MockTagsMockRecorder) Uuid(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uuid", reflect.TypeOf((*MockTags)(nil).Uuid), column)
}
