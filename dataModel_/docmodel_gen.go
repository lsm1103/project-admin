// Code generated by goctl. DO NOT EDIT!

package dataModel_

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	docFieldNames          = builder.RawFieldNames(&Doc{})
	docRows                = strings.Join(docFieldNames, ",")
	docRowsExpectAutoSet   = strings.Join(stringx.Remove(docFieldNames, "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	docRowsWithPlaceHolder = strings.Join(stringx.Remove(docFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	cacheDocIdPrefix             = "cache:doc:id:"
	cacheDocNameCreateUserPrefix = "cache:doc:name:createUser:"
)

type (
	docModel interface {
		Insert(ctx context.Context, data *Doc) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Doc, error)
		FindOneByNameCreateUser(ctx context.Context, name string, createUser int64) (*Doc, error)
		Update(ctx context.Context, data *Doc) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDocModel struct {
		sqlc.CachedConn
		table string
	}

	Doc struct {
		Id           int64     `db:"id"`            // 主键
		Name         string    `db:"name"`          // 文档标题
		CreateUser   int64     `db:"create_user"`   // 所属用户
		PreContent   string    `db:"pre_content"`   // 编辑内容
		Content      string    `db:"content"`       // 文档内容
		ParentDoc    int64     `db:"parent_doc"`    // 上级文档
		GroupId      int64     `db:"group_id"`      // 所属文档组
		Sort         int64     `db:"sort"`          // 排序
		EditorMode   int64     `db:"editor_mode"`   // 编辑器模式,1表示Editormd编辑器，2表示Vditor编辑器，3表示iceEditor编辑器
		OpenChildren int64     `db:"open_children"` // 展开下级目录
		ShowChildren int64     `db:"show_children"` // 显示下级文档
		State        int64     `db:"state"`         // 文档状态，-2删除，-1禁用，待审核-草稿0，启用1
		CreateTime   time.Time `db:"create_time"`   // 创建时间
		UpdateTime   time.Time `db:"update_time"`   // 更新时间
	}
)

func newDocModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultDocModel {
	return &defaultDocModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`doc`",
	}
}

func (m *defaultDocModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	docIdKey := fmt.Sprintf("%s%v", cacheDocIdPrefix, id)
	docNameCreateUserKey := fmt.Sprintf("%s%v:%v", cacheDocNameCreateUserPrefix, data.Name, data.CreateUser)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, docIdKey, docNameCreateUserKey)
	return err
}

func (m *defaultDocModel) FindOne(ctx context.Context, id int64) (*Doc, error) {
	docIdKey := fmt.Sprintf("%s%v", cacheDocIdPrefix, id)
	var resp Doc
	err := m.QueryRowCtx(ctx, &resp, docIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", docRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDocModel) FindOneByNameCreateUser(ctx context.Context, name string, createUser int64) (*Doc, error) {
	docNameCreateUserKey := fmt.Sprintf("%s%v:%v", cacheDocNameCreateUserPrefix, name, createUser)
	var resp Doc
	err := m.QueryRowIndexCtx(ctx, &resp, docNameCreateUserKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? and `create_user` = ? limit 1", docRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name, createUser); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDocModel) Insert(ctx context.Context, data *Doc) (sql.Result, error) {
	docIdKey := fmt.Sprintf("%s%v", cacheDocIdPrefix, data.Id)
	docNameCreateUserKey := fmt.Sprintf("%s%v:%v", cacheDocNameCreateUserPrefix, data.Name, data.CreateUser)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, docRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.CreateUser, data.PreContent, data.Content, data.ParentDoc, data.GroupId, data.Sort, data.EditorMode, data.OpenChildren, data.ShowChildren)
	}, docIdKey, docNameCreateUserKey)
	return ret, err
}

func (m *defaultDocModel) Update(ctx context.Context, newData *Doc) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	docIdKey := fmt.Sprintf("%s%v", cacheDocIdPrefix, data.Id)
	docNameCreateUserKey := fmt.Sprintf("%s%v:%v", cacheDocNameCreateUserPrefix, data.Name, data.CreateUser)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, docRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.CreateUser, newData.PreContent, newData.Content, newData.ParentDoc, newData.GroupId, newData.Sort, newData.EditorMode, newData.OpenChildren, newData.ShowChildren, newData.State, newData.Id)
	}, docIdKey, docNameCreateUserKey)
	return err
}

func (m *defaultDocModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDocIdPrefix, primary)
}

func (m *defaultDocModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", docRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDocModel) tableName() string {
	return m.table
}
