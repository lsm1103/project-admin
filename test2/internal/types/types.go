// Code generated by goctl. DO NOT EDIT.
package types

type DeleteReq struct {
	Id int64 `json:"id"` // 序列号
}

type GetReq struct {
	Id int64 `form:"id"` // 序列号
}

type CreateSingleMsgReq struct {
	SenderType       string `json:"sender_type"tag:"uint"min:"1"max:"3"`            // 发送者类型：1发消息，2打招呼，3转发
	SenderId         int64  `json:"sender_id"tag:"uuid"`                            // 发送者id
	SenderDeviceId   string `json:"sender_device_id"tag:"uuid"`                     // 发送设备id
	ReceiverId       int64  `json:"receiver_id"tag:"uuid"`                          // 接收者id
	ReceiverDeviceId string `json:"receiver_device_id"tag:"char"fixed_len:"18|100"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	MsgType          string `json:"msg_type"tag:"char"content:"text|img|link"`      // 消息类型
	Content          string `json:"content"tag:"chineseChar"fixed_len:"18|150"`     // 消息内容
	ParentId         int64  `json:"parent_id"tag:"uuid"`                            // 父级id，引用功能
	SendTime         string `json:"send_time"tag:"dateTime"`                        // 消息发送时间
}

type UpdateSingleMsgReq struct {
	Id               int64  `json:"id"`                                             // 序列号
	SenderType       string `json:"sender_type"tag:"uint"min:"1"max:"3"`            // 发送者类型：1发消息，2打招呼，3转发
	SenderId         int64  `json:"sender_id"tag:"uuid"`                            // 发送者id
	SenderDeviceId   string `json:"sender_device_id"tag:"uuid"`                     // 发送设备id
	ReceiverId       int64  `json:"receiver_id"tag:"uuid"`                          // 接收者id
	ReceiverDeviceId string `json:"receiver_device_id"tag:"char"fixed_len:"18|100"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	MsgType          string `json:"msg_type"tag:"char"content:"text|img|link"`      // 消息类型
	Content          string `json:"content"tag:"chineseChar"fixed_len:"18|150"`     // 消息内容
	ParentId         int64  `json:"parent_id"tag:"uuid"`                            // 父级id，引用功能
	SendTime         string `json:"send_time"tag:"dateTime"`                        // 消息发送时间
	State            int64  `json:"state"tag:"uint"min:"-1"max:"1"`                 // 消息状态：-1撤回，0未处理，1已读
}

type SingleMsg struct {
	Id               int64  `json:"id"tag:"uuid"`                                   // 序列号
	Seq              int64  `json:"seq"tag:"uuid"`                                  // 消息序列号,每个单聊都维护一个消息序列号
	SenderType       string `json:"sender_type"tag:"uint"min:"1"max:"3"`            // 发送者类型：1发消息，2打招呼，3转发
	SenderId         int64  `json:"sender_id"tag:"uuid"`                            // 发送者id
	SenderDeviceId   string `json:"sender_device_id"tag:"uuid"`                     // 发送设备id
	ReceiverId       int64  `json:"receiver_id"tag:"uuid"`                          // 接收者id
	ReceiverDeviceId string `json:"receiver_device_id"tag:"char"fixed_len:"18|100"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	MsgType          string `json:"msg_type"tag:"char"content:"text|img|link"`      // 消息类型
	Content          string `json:"content"tag:"chineseChar"fixed_len:"18|150"`     // 消息内容
	ParentId         int64  `json:"parent_id"tag:"uuid"`                            // 父级id，引用功能
	SendTime         string `json:"send_time"tag:"dateTime"`                        // 消息发送时间
	State            int64  `json:"state"tag:"uint"min:"-1"max:"1"`                 // 消息状态：-1撤回，0未处理，1已读
	CreateTime       string `json:"createTime"tag:"dateTime"`                       // 创建时间
	UpdateTime       string `json:"updateTime"tag:"dateTime"`                       // 更新时间
}

type GetsQueryItem struct {
	Key        string `json:"key"`                                   // key
	Val        string `json:"val"`                                   // val int/str('xxx')/list('xx,xx,xx')
	Handle     string `json:"handle"`                                // 操作方法 =/>/</like
	NextHandle string `json:"nextHandle,options=or|and,default=and"` // 与下一个条件的操作方法 or/and
}

type GetsReq struct {
	Query    []*GetsQueryItem `json:"query"`                              //查询
	OrderBy  string           `json:"orderBy,default=id"`                 //分组
	Sort     string           `json:"sort,options=desc|asc,default=desc"` //排序 desc/asc
	Current  int64            `json:"current,default=1"`                  //当前页
	PageSize int64            `json:"pageSize,default=10"`                //页面大小
}

type SingleMsgList struct {
	List     []*SingleMsg `json:"list"tag:"list"`                       // 数据列表
	Current  int64        `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
	PageSize int64        `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
	IsNext   bool         `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
}

type CreateGroupMsgReq struct {
	SenderType       string `json:"sender_type"tag:"uint"min:"1"max:"3"`            // 发送者类型：1发消息，2打招呼，3转发
	SenderId         int64  `json:"sender_id"tag:"uuid"`                            // 发送者id
	SenderDeviceId   string `json:"sender_device_id"tag:"uuid"`                     // 发送设备id
	ReceiverId       int64  `json:"receiver_id"tag:"uuid"`                          // 接收者id
	ReceiverDeviceId string `json:"receiver_device_id"tag:"char"fixed_len:"18|100"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	MsgType          string `json:"msg_type"tag:"char"content:"text|img|link"`      // 消息类型
	Content          string `json:"content"tag:"chineseChar"fixed_len:"18|150"`     // 消息内容
	ParentId         int64  `json:"parent_id"tag:"uuid"`                            // 父级id，引用功能
	SendTime         string `json:"send_time"tag:"dateTime"`                        // 消息发送时间
}

type UpdateGroupMsgReq struct {
	Id               int64  `json:"id"`                                             // 序列号
	SenderType       string `json:"sender_type"tag:"uint"min:"1"max:"3"`            // 发送者类型：1发消息，2打招呼，3转发
	SenderId         int64  `json:"sender_id"tag:"uuid"`                            // 发送者id
	SenderDeviceId   string `json:"sender_device_id"tag:"uuid"`                     // 发送设备id
	ReceiverId       int64  `json:"receiver_id"tag:"uuid"`                          // 接收者id
	ReceiverDeviceId string `json:"receiver_device_id"tag:"char"fixed_len:"18|100"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	MsgType          string `json:"msg_type"tag:"char"content:"text|img|link"`      // 消息类型
	Content          string `json:"content"tag:"chineseChar"fixed_len:"18|150"`     // 消息内容
	ParentId         int64  `json:"parent_id"tag:"uuid"`                            // 父级id，引用功能
	SendTime         string `json:"send_time"tag:"dateTime"`                        // 消息发送时间
	State            int64  `json:"state"tag:"uint"min:"-1"max:"1"`                 // 消息状态：-1撤回，0未处理，1已读
}

type GroupMsg struct {
	Id               int64  `json:"id"tag:"uuid"`                                   // 序列号
	Seq              int64  `json:"seq"tag:"uuid"`                                  // 消息序列号,每个单聊都维护一个消息序列号
	SenderType       string `json:"sender_type"tag:"uint"min:"1"max:"3"`            // 发送者类型：1发消息，2打招呼，3转发
	SenderId         int64  `json:"sender_id"tag:"uuid"`                            // 发送者id
	SenderDeviceId   string `json:"sender_device_id"tag:"uuid"`                     // 发送设备id
	ReceiverId       int64  `json:"receiver_id"tag:"uuid"`                          // 接收者id
	ReceiverDeviceId string `json:"receiver_device_id"tag:"char"fixed_len:"18|100"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	MsgType          string `json:"msg_type"tag:"char"content:"text|img|link"`      // 消息类型
	Content          string `json:"content"tag:"chineseChar"fixed_len:"18|150"`     // 消息内容
	ParentId         int64  `json:"parent_id"tag:"uuid"`                            // 父级id，引用功能
	SendTime         string `json:"send_time"tag:"dateTime"`                        // 消息发送时间
	State            int64  `json:"state"tag:"uint"min:"-1"max:"1"`                 // 消息状态：-1撤回，0未处理，1已读
	CreateTime       string `json:"createTime"tag:"dateTime"`                       // 创建时间
	UpdateTime       string `json:"updateTime"tag:"dateTime"`                       // 更新时间
}

type GroupMsgList struct {
	List     []*SingleMsg `json:"list"tag:"list"`                       // 数据列表
	Current  int64        `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
	PageSize int64        `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
	IsNext   bool         `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
}
