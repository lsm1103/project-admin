syntax = "v1"

info(
	title: 项目1       // "项目1"
	desc: 通过api设计文档自动生成服务，并根据api文件配置的字段mock规则进行mock生成结果         // "通过api设计文档自动生成服务，并根据api文件配置的字段mock规则进行mock生成结果"
	author: lsm     // "lsm"
	email: 18370872400@163.com       // "18370872400@163.com"
	version: v0.1.1   // "v0.1.1"
)

type (
	DeleteReq {
		Id int64 `json:"id"` // 主键
	}

	GetReq {
		Id int64 `form:"id"` // 主键
	}

	createReq {
	    UserId int64 `json:"user_id"` // 用户id
DeviceId string `json:"device_id"` // 设备id
ObjectType int64 `json:"object_type"` // 对象类型,1:friend；2：群组
ObjectId int64 `json:"object_id"` // 对象id, friendId/groupId
LastAckSeq int64 `json:"last_ack_seq"` // 最后确认序列号
NewestSeq int64 `json:"newest_seq"` // 最新的消息序列号
State int64 `json:"state"` // 消息状态：-1撤回，0未处理，1已读
	}

	updateReq {
	    UserId int64 `json:"user_id"` // 用户id
DeviceId string `json:"device_id"` // 设备id
ObjectType int64 `json:"object_type"` // 对象类型,1:friend；2：群组
ObjectId int64 `json:"object_id"` // 对象id, friendId/groupId
LastAckSeq int64 `json:"last_ack_seq"` // 最后确认序列号
NewestSeq int64 `json:"newest_seq"` // 最新的消息序列号
	}
	Offline_msg {
	    Id int64 `json:"id"` // 主键
UserId int64 `json:"user_id"` // 用户id
DeviceId string `json:"device_id"` // 设备id
ObjectType int64 `json:"object_type"` // 对象类型,1:friend；2：群组
ObjectId int64 `json:"object_id"` // 对象id, friendId/groupId
LastAckSeq int64 `json:"last_ack_seq"` // 最后确认序列号
NewestSeq int64 `json:"newest_seq"` // 最新的消息序列号
State int64 `json:"state"` // 消息状态：-1撤回，0未处理，1已读
CreateTime time.Time `json:"create_time"` // 创建时间
UpdateTime time.Time `json:"update_time"` // 更新时间
        /*
            Id               int64  `json:"id"`                                     // 主键
            Seq              int64  `json:"seq"`                                    // 消息主键,每个单聊都维护一个消息主键
            SenderType       string `json:"sender_type"`                            // 发送者类型：1发消息，2打招呼，3转发
            SenderId         int64  `json:"sender_id"`                              // 发送者id
            SenderDeviceId   string `json:"sender_device_id"`                       // 发送设备id
            ReceiverId       int64  `json:"receiver_id"`                            // 接收者id
            ReceiverDeviceId string `json:"receiver_device_id"`                     // 接收设备id：多个设备id"，"隔开，*表示全部设备
            MsgType          string `json:"msg_type"`                               // 消息类型
            Content          string `json:"content"`                                // 消息内容
            ParentId         int64  `json:"parent_id"`                              // 父级id，引用功能
            SendTime         string `json:"send_time"`                              // 消息发送时间
            State            int64  `json:"state"`                                  // 消息状态：-1撤回，0未处理，1已读
            CreateTime       string `json:"createTime"`                             // 创建时间
            UpdateTime       string `json:"updateTime"`                             // 更新时间
        */
	}

	// 查询列表；
	GetsQueryItem {
		Key        string `json:"key"`                                   // key
		Val        string `json:"val"`                                   // val int/str('xxx')/list('xx,xx,xx')
		Handle     string `json:"handle"`                                // 操作方法 =/>/</like
		NextHandle string `json:"nextHandle,options=or|and,default=and"` // 与下一个条件的操作方法 or/and
	}
	GetsReq {
		Query    []*GetsQueryItem `json:"query"`                              //查询
		OrderBy  string           `json:"orderBy,default=id"`                 //分组
		Sort     string           `json:"sort,options=desc|asc,default=desc"` //排序 desc/asc
		Current  int64            `json:"current,default=1"`                  //当前页
		PageSize int64            `json:"pageSize,default=10"`                //页面大小
	}
	// 查询列表结果
	Offline_msgList {
		List     []*Offline_msg `json:"list"tag:"list"`                       // 数据列表
		Current  int64        `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
		PageSize int64        `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
		IsNext   bool         `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
		// total           int64        `json:"total"`  // 总数
	}
)

type (
	DeleteReq {
		Id int64 `json:"id"` // 主键
	}

	GetReq {
		Id int64 `form:"id"` // 主键
	}

	createReq {
	    Seq int64 `json:"seq"` // 消息序列号,每个单聊都维护一个消息序列号
SenderType int64 `json:"sender_type"` // 发送者类型：1朋友，2打招呼，3转发
SenderId int64 `json:"sender_id"` // 发送者id
SenderDeviceId string `json:"sender_device_id"` // 发送设备id
ReceiverId int64 `json:"receiver_id"` // 接收者id(friendId)
ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
MsgType int64 `json:"msg_type"` // 消息类型：0文本、1图文、2语音、3视频、4链接
Content string `json:"content"` // 消息内容
ParentId int64 `json:"parent_id"` // 父级id，引用功能
SendTime time.Time `json:"send_time"` // 消息发送时间
State int64 `json:"state"` // 消息状态：-1撤回，0未处理，1已读
	}

	updateReq {
	    Seq int64 `json:"seq"` // 消息序列号,每个单聊都维护一个消息序列号
SenderType int64 `json:"sender_type"` // 发送者类型：1朋友，2打招呼，3转发
SenderId int64 `json:"sender_id"` // 发送者id
SenderDeviceId string `json:"sender_device_id"` // 发送设备id
ReceiverId int64 `json:"receiver_id"` // 接收者id(friendId)
ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
MsgType int64 `json:"msg_type"` // 消息类型：0文本、1图文、2语音、3视频、4链接
Content string `json:"content"` // 消息内容
ParentId int64 `json:"parent_id"` // 父级id，引用功能
SendTime time.Time `json:"send_time"` // 消息发送时间
	}
	Single_msg {
	    Id int64 `json:"id"` // 主键
Seq int64 `json:"seq"` // 消息序列号,每个单聊都维护一个消息序列号
SenderType int64 `json:"sender_type"` // 发送者类型：1朋友，2打招呼，3转发
SenderId int64 `json:"sender_id"` // 发送者id
SenderDeviceId string `json:"sender_device_id"` // 发送设备id
ReceiverId int64 `json:"receiver_id"` // 接收者id(friendId)
ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
MsgType int64 `json:"msg_type"` // 消息类型：0文本、1图文、2语音、3视频、4链接
Content string `json:"content"` // 消息内容
ParentId int64 `json:"parent_id"` // 父级id，引用功能
SendTime time.Time `json:"send_time"` // 消息发送时间
State int64 `json:"state"` // 消息状态：-1撤回，0未处理，1已读
CreateTime time.Time `json:"create_time"` // 创建时间
UpdateTime time.Time `json:"update_time"` // 更新时间
        /*
            Id               int64  `json:"id"`                                     // 主键
            Seq              int64  `json:"seq"`                                    // 消息主键,每个单聊都维护一个消息主键
            SenderType       string `json:"sender_type"`                            // 发送者类型：1发消息，2打招呼，3转发
            SenderId         int64  `json:"sender_id"`                              // 发送者id
            SenderDeviceId   string `json:"sender_device_id"`                       // 发送设备id
            ReceiverId       int64  `json:"receiver_id"`                            // 接收者id
            ReceiverDeviceId string `json:"receiver_device_id"`                     // 接收设备id：多个设备id"，"隔开，*表示全部设备
            MsgType          string `json:"msg_type"`                               // 消息类型
            Content          string `json:"content"`                                // 消息内容
            ParentId         int64  `json:"parent_id"`                              // 父级id，引用功能
            SendTime         string `json:"send_time"`                              // 消息发送时间
            State            int64  `json:"state"`                                  // 消息状态：-1撤回，0未处理，1已读
            CreateTime       string `json:"createTime"`                             // 创建时间
            UpdateTime       string `json:"updateTime"`                             // 更新时间
        */
	}

	// 查询列表；
	GetsQueryItem {
		Key        string `json:"key"`                                   // key
		Val        string `json:"val"`                                   // val int/str('xxx')/list('xx,xx,xx')
		Handle     string `json:"handle"`                                // 操作方法 =/>/</like
		NextHandle string `json:"nextHandle,options=or|and,default=and"` // 与下一个条件的操作方法 or/and
	}
	GetsReq {
		Query    []*GetsQueryItem `json:"query"`                              //查询
		OrderBy  string           `json:"orderBy,default=id"`                 //分组
		Sort     string           `json:"sort,options=desc|asc,default=desc"` //排序 desc/asc
		Current  int64            `json:"current,default=1"`                  //当前页
		PageSize int64            `json:"pageSize,default=10"`                //页面大小
	}
	// 查询列表结果
	Single_msgList {
		List     []*Single_msg `json:"list"tag:"list"`                       // 数据列表
		Current  int64        `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
		PageSize int64        `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
		IsNext   bool         `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
		// total           int64        `json:"total"`  // 总数
	}
)

@server(
	prefix: admin/Offline_msg/v1
	group: Offline_msg
	module: Offline_msg  //SingleMsg
)
service project {
	@doc (
		summary:创建
		handlerType:create
	)
	@handler Create
	post /create(createReq)
	
	@doc (
		summary:更新
		handlerType:update
	)
	@handler Update
	put /update(updateReq)
	
	@doc (
		summary:删除
		handlerType:delete
	)
	@handler Delete
	delete /delete(DeleteReq)
	
	@doc (
		summary:查询一个
		handlerType:get
	)
	@handler Get
	get /get(GetReq) returns(Offline_msg)
	
	@doc (
		summary:查询列表
		handlerType:gets
	)
	@handler Gets
	post /gets(GetsReq) returns(Offline_msgList)
}

@server(
	prefix: admin/Single_msg/v1
	group: Single_msg
	module: Single_msg  //SingleMsg
)
service project {
	@doc (
		summary:创建
		handlerType:create
	)
	@handler Create
	post /create(createReq)
	
	@doc (
		summary:更新
		handlerType:update
	)
	@handler Update
	put /update(updateReq)
	
	@doc (
		summary:删除
		handlerType:delete
	)
	@handler Delete
	delete /delete(DeleteReq)
	
	@doc (
		summary:查询一个
		handlerType:get
	)
	@handler Get
	get /get(GetReq) returns(Single_msg)
	
	@doc (
		summary:查询列表
		handlerType:gets
	)
	@handler Gets
	post /gets(GetsReq) returns(Single_msgList)
}
