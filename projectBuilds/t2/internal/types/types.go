// Code generated by goctl. DO NOT EDIT.
package types

type DeleteReq struct {
	Id int64 `json:"id"` // 主键
}

type GetReq struct {
	Id int64 `form:"id"` // 主键
}

type GetsQueryItem struct {
	Key        string `json:"key"`                                   // key
	Val        string `json:"val"`                                   // val int/str('xxx')/list('xx,xx,xx')
	Handle     string `json:"handle"`                                // 操作方法 =/>/</like
	NextHandle string `json:"nextHandle,options=or|and,default=and"` // 与下一个条件的操作方法 or/and
}

type GetsReq struct {
	Query    []*GetsQueryItem `json:"query"`                              //查询
	OrderBy  string           `json:"orderBy,default=id"`                 //分组
	Sort     string           `json:"sort,options=desc|asc,default=desc"` //排序 desc/asc
	Current  int64            `json:"current,default=1"`                  //当前页
	PageSize int64            `json:"pageSize,default=10"`                //页面大小
}

type CreateGroupReq struct {
	Name       string `json:"name"`        // 组名称
	CreateUser int64  `json:"create_user"` // 创建者id
	Ico        string `json:"ico"`         // 组图标
	Remark     string `json:"remark"`      // 备注
	ParentId   int64  `json:"parent_id"`   // 父级id
	GroupType  int64  `json:"group_type"`  // 类型: 1部门、2用户组、3群组、4圈子、5话题
	Rank       int64  `json:"rank"`        // 排序
}

type UpdateGroupReq struct {
	Id         int64  `json:"id"`                   // 自增主键
	Name       string `json:"name,optional"`        // 组名称
	CreateUser int64  `json:"create_user,optional"` // 创建者id
	Ico        string `json:"ico,optional"`         // 组图标
	Remark     string `json:"remark,optional"`      // 备注
	ParentId   int64  `json:"parent_id,optional"`   // 父级id
	GroupType  int64  `json:"group_type,optional"`  // 类型: 1部门、2用户组、3群组、4圈子、5话题
	Rank       int64  `json:"rank,optional"`        // 排序
	State      int64  `json:"state,optional"`       // 状态，-2删除，-1禁用，待审核0，启用1
}

type Group struct {
	Id         int64  `json:"id"`          // 自增主键
	Name       string `json:"name"`        // 组名称
	CreateUser int64  `json:"create_user"` // 创建者id
	Ico        string `json:"ico"`         // 组图标
	Remark     string `json:"remark"`      // 备注
	ParentId   int64  `json:"parent_id"`   // 父级id
	GroupType  int64  `json:"group_type"`  // 类型: 1部门、2用户组、3群组、4圈子、5话题
	Rank       int64  `json:"rank"`        // 排序
	State      int64  `json:"state"`       // 状态，-2删除，-1禁用，待审核0，启用1
	CreateTime string `json:"create_time"` // 创建时间
	UpdateTime string `json:"update_time"` // 更新时间
}

type GroupList struct {
	List     []*Group `json:"list"tag:"list"`                       // 数据列表
	Current  int64    `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
	PageSize int64    `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
	IsNext   bool     `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
}

type CreateUserGroupReq struct {
	UserId  int64 `json:"user_id"`  // 用户id
	GroupId int64 `json:"group_id"` // 组id
}

type UpdateUserGroupReq struct {
	Id      int64 `json:"id"`                // 自增主键
	UserId  int64 `json:"user_id,optional"`  // 用户id
	GroupId int64 `json:"group_id,optional"` // 组id
	State   int64 `json:"state,optional"`    // 状态，-2删除，-1禁用，待审核0，启用1
}

type UserGroup struct {
	Id         int64  `json:"id"`          // 自增主键
	UserId     int64  `json:"user_id"`     // 用户id
	GroupId    int64  `json:"group_id"`    // 组id
	State      int64  `json:"state"`       // 状态，-2删除，-1禁用，待审核0，启用1
	CreateTime string `json:"create_time"` // 创建时间
	UpdateTime string `json:"update_time"` // 更新时间
}

type UserGroupList struct {
	List     []*UserGroup `json:"list"tag:"list"`                       // 数据列表
	Current  int64        `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
	PageSize int64        `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
	IsNext   bool         `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
}

type CreateFriendReq struct {
	ApplyUser   int64  `json:"apply_user"`   // 申请用户id
	ApplyDevice string `json:"apply_device"` // 申请设备id
	AcceptUser  int64  `json:"accept_user"`  // 接受用户id
	ApplyReason string `json:"apply_reason"` // 申请理由
	Extra       string `json:"extra"`        // 附加属性
}

type UpdateFriendReq struct {
	Id          int64  `json:"id"`                    // 自增主键
	ApplyUser   int64  `json:"apply_user,optional"`   // 申请用户id
	ApplyDevice string `json:"apply_device,optional"` // 申请设备id
	AcceptUser  int64  `json:"accept_user,optional"`  // 接受用户id
	ApplyReason string `json:"apply_reason,optional"` // 申请理由
	Extra       string `json:"extra,optional"`        // 附加属性
	State       int64  `json:"state,optional"`        // 状态，-2：拉黑，-1：拒绝，0：申请中，1：同意
}

type Friend struct {
	Id          int64  `json:"id"`           // 自增主键
	ApplyUser   int64  `json:"apply_user"`   // 申请用户id
	ApplyDevice string `json:"apply_device"` // 申请设备id
	AcceptUser  int64  `json:"accept_user"`  // 接受用户id
	ApplyReason string `json:"apply_reason"` // 申请理由
	Extra       string `json:"extra"`        // 附加属性
	State       int64  `json:"state"`        // 状态，-2：拉黑，-1：拒绝，0：申请中，1：同意
	CreateTime  string `json:"create_time"`  // 创建时间
	UpdateTime  string `json:"update_time"`  // 更新时间
}

type FriendList struct {
	List     []*Friend `json:"list"tag:"list"`                       // 数据列表
	Current  int64     `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
	PageSize int64     `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
	IsNext   bool      `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
}

type CreateOfflineMsgReq struct {
	UserId     int64  `json:"user_id"`      // 用户id
	DeviceId   string `json:"device_id"`    // 设备id
	ObjectType int64  `json:"object_type"`  // 对象类型,1:friend；2：群组
	ObjectId   int64  `json:"object_id"`    // 对象id, friendId/groupId
	LastAckSeq int64  `json:"last_ack_seq"` // 最后确认序列号
	NewestSeq  int64  `json:"newest_seq"`   // 最新的消息序列号
}

type UpdateOfflineMsgReq struct {
	Id         int64  `json:"id"`                    // 自增主键
	UserId     int64  `json:"user_id,optional"`      // 用户id
	DeviceId   string `json:"device_id,optional"`    // 设备id
	ObjectType int64  `json:"object_type,optional"`  // 对象类型,1:friend；2：群组
	ObjectId   int64  `json:"object_id,optional"`    // 对象id, friendId/groupId
	LastAckSeq int64  `json:"last_ack_seq,optional"` // 最后确认序列号
	NewestSeq  int64  `json:"newest_seq,optional"`   // 最新的消息序列号
	State      int64  `json:"state,optional"`        // 消息状态：-1撤回，0未处理，1已读
}

type OfflineMsg struct {
	Id         int64  `json:"id"`           // 自增主键
	UserId     int64  `json:"user_id"`      // 用户id
	DeviceId   string `json:"device_id"`    // 设备id
	ObjectType int64  `json:"object_type"`  // 对象类型,1:friend；2：群组
	ObjectId   int64  `json:"object_id"`    // 对象id, friendId/groupId
	LastAckSeq int64  `json:"last_ack_seq"` // 最后确认序列号
	NewestSeq  int64  `json:"newest_seq"`   // 最新的消息序列号
	State      int64  `json:"state"`        // 消息状态：-1撤回，0未处理，1已读
	CreateTime string `json:"create_time"`  // 创建时间
	UpdateTime string `json:"update_time"`  // 更新时间
}

type OfflineMsgList struct {
	List     []*OfflineMsg `json:"list"tag:"list"`                       // 数据列表
	Current  int64         `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
	PageSize int64         `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
	IsNext   bool          `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
}

type CreateSingleMsgReq struct {
	Seq              int64  `json:"seq"`                // 消息序列号,每个单聊都维护一个消息序列号
	SenderType       int64  `json:"sender_type"`        // 发送者类型：1朋友，2打招呼，3转发
	SenderId         int64  `json:"sender_id"`          // 发送者id
	SenderDeviceId   string `json:"sender_device_id"`   // 发送设备id
	ReceiverId       int64  `json:"receiver_id"`        // 接收者id(friendId)
	ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	MsgType          int64  `json:"msg_type"`           // 消息类型：0文本、1图文、2语音、3视频、4链接
	Content          string `json:"content"`            // 消息内容
	ParentId         int64  `json:"parent_id"`          // 父级id，引用功能
	SendTime         string `json:"send_time"`          // 消息发送时间
}

type UpdateSingleMsgReq struct {
	Id               int64  `json:"id"`                          // 自增主键
	Seq              int64  `json:"seq,optional"`                // 消息序列号,每个单聊都维护一个消息序列号
	SenderType       int64  `json:"sender_type,optional"`        // 发送者类型：1朋友，2打招呼，3转发
	SenderId         int64  `json:"sender_id,optional"`          // 发送者id
	SenderDeviceId   string `json:"sender_device_id,optional"`   // 发送设备id
	ReceiverId       int64  `json:"receiver_id,optional"`        // 接收者id(friendId)
	ReceiverDeviceId string `json:"receiver_device_id,optional"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	MsgType          int64  `json:"msg_type,optional"`           // 消息类型：0文本、1图文、2语音、3视频、4链接
	Content          string `json:"content,optional"`            // 消息内容
	ParentId         int64  `json:"parent_id,optional"`          // 父级id，引用功能
	SendTime         string `json:"send_time,optional"`          // 消息发送时间
	State            int64  `json:"state,optional"`              // 消息状态：-1撤回，0未处理，1已读
}

type SingleMsg struct {
	Id               int64  `json:"id"`                 // 自增主键
	Seq              int64  `json:"seq"`                // 消息序列号,每个单聊都维护一个消息序列号
	SenderType       int64  `json:"sender_type"`        // 发送者类型：1朋友，2打招呼，3转发
	SenderId         int64  `json:"sender_id"`          // 发送者id
	SenderDeviceId   string `json:"sender_device_id"`   // 发送设备id
	ReceiverId       int64  `json:"receiver_id"`        // 接收者id(friendId)
	ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	MsgType          int64  `json:"msg_type"`           // 消息类型：0文本、1图文、2语音、3视频、4链接
	Content          string `json:"content"`            // 消息内容
	ParentId         int64  `json:"parent_id"`          // 父级id，引用功能
	SendTime         string `json:"send_time"`          // 消息发送时间
	State            int64  `json:"state"`              // 消息状态：-1撤回，0未处理，1已读
	CreateTime       string `json:"create_time"`        // 创建时间
	UpdateTime       string `json:"update_time"`        // 更新时间
}

type SingleMsgList struct {
	List     []*SingleMsg `json:"list"tag:"list"`                       // 数据列表
	Current  int64        `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
	PageSize int64        `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
	IsNext   bool         `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
}

type CreateGroupMsgReq struct {
	Seq              int64  `json:"seq"`                // 消息序列号,每个单聊都维护一个消息序列号
	SenderType       int64  `json:"sender_type"`        // 发送者类型：1群内，2转发
	SenderId         int64  `json:"sender_id"`          // 发送者id
	SenderDeviceId   string `json:"sender_device_id"`   // 发送设备id
	ReceiverId       int64  `json:"receiver_id"`        // 接收者id(group_id)
	ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	AtUserIds        string `json:"at_user_ids"`        // 需要@的用户id列表，多个用户用@隔开
	MsgType          int64  `json:"msg_type"`           // 消息类型：0文本、1图文、2语音、3视频、地址、4链接
	Content          string `json:"content"`            // 消息内容
	ParentId         int64  `json:"parent_id"`          // 父级id，引用功能
	SendTime         string `json:"send_time"`          // 消息发送时间
}

type UpdateGroupMsgReq struct {
	Id               int64  `json:"id"`                          // 自增主键
	Seq              int64  `json:"seq,optional"`                // 消息序列号,每个单聊都维护一个消息序列号
	SenderType       int64  `json:"sender_type,optional"`        // 发送者类型：1群内，2转发
	SenderId         int64  `json:"sender_id,optional"`          // 发送者id
	SenderDeviceId   string `json:"sender_device_id,optional"`   // 发送设备id
	ReceiverId       int64  `json:"receiver_id,optional"`        // 接收者id(group_id)
	ReceiverDeviceId string `json:"receiver_device_id,optional"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	AtUserIds        string `json:"at_user_ids,optional"`        // 需要@的用户id列表，多个用户用@隔开
	MsgType          int64  `json:"msg_type,optional"`           // 消息类型：0文本、1图文、2语音、3视频、地址、4链接
	Content          string `json:"content,optional"`            // 消息内容
	ParentId         int64  `json:"parent_id,optional"`          // 父级id，引用功能
	SendTime         string `json:"send_time,optional"`          // 消息发送时间
	State            int64  `json:"state,optional"`              // 消息状态，-3接收者删除，-2发送者删除，-1撤回，0未处理，1已读
}

type GroupMsg struct {
	Id               int64  `json:"id"`                 // 自增主键
	Seq              int64  `json:"seq"`                // 消息序列号,每个单聊都维护一个消息序列号
	SenderType       int64  `json:"sender_type"`        // 发送者类型：1群内，2转发
	SenderId         int64  `json:"sender_id"`          // 发送者id
	SenderDeviceId   string `json:"sender_device_id"`   // 发送设备id
	ReceiverId       int64  `json:"receiver_id"`        // 接收者id(group_id)
	ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
	AtUserIds        string `json:"at_user_ids"`        // 需要@的用户id列表，多个用户用@隔开
	MsgType          int64  `json:"msg_type"`           // 消息类型：0文本、1图文、2语音、3视频、地址、4链接
	Content          string `json:"content"`            // 消息内容
	ParentId         int64  `json:"parent_id"`          // 父级id，引用功能
	SendTime         string `json:"send_time"`          // 消息发送时间
	State            int64  `json:"state"`              // 消息状态，-3接收者删除，-2发送者删除，-1撤回，0未处理，1已读
	CreateTime       string `json:"create_time"`        // 创建时间
	UpdateTime       string `json:"update_time"`        // 更新时间
}

type GroupMsgList struct {
	List     []*GroupMsg `json:"list"tag:"list"`                       // 数据列表
	Current  int64       `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
	PageSize int64       `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
	IsNext   bool        `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
}
