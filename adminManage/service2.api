syntax = "v1"

info(
	title: "项目1"
	desc: "通过api设计文档自动生成服务，并根据api文件配置的字段mock规则进行mock生成结果"
	version: "v0.1.1"
	author: "lsm"
	email: "18370872400@163.com"
	
	host: 0.0.0.0
	port: 801
	commonPkgPath: project-admin
	dataSource: root:pujian123@tcp(172.16.10.183:4306)/im-center
	cacheHost: 172.16.10.183:6379
)

type (
	DeleteReq {
		Id int64 `json:"id"` // 主键
	}

	GetReq {
		Id int64 `form:"id"` // 主键
	}

	// 查询列表；
	GetsQueryItem {
		Key        string `json:"key"`                                   // key
		Val        string `json:"val"`                                   // val int/str('xxx')/list('xx,xx,xx')
		Handle     string `json:"handle"`                                // 操作方法 =/>/</like
		NextHandle string `json:"nextHandle,options=or|and,default=and"` // 与下一个条件的操作方法 or/and
	}
	GetsReq {
		Query    []*GetsQueryItem `json:"query"`                              //查询
		OrderBy  string           `json:"orderBy,default=id"`                 //分组
		Sort     string           `json:"sort,options=desc|asc,default=desc"` //排序 desc/asc
		Current  int64            `json:"current,default=1"`                  //当前页
		PageSize int64            `json:"pageSize,default=10"`                //页面大小
	}
)

type (
	createGroupReq {
		Name       string `json:"name"`        // 组名称
		CreateUser int64  `json:"create_user"` // 创建者id
		Ico        string `json:"ico"`         // 组图标
		Remark     string `json:"remark"`      // 备注
		ParentId   int64  `json:"parent_id"`   // 父级id
		GroupType  int64  `json:"group_type"`  // 类型: 1部门、2用户组、3群组、4圈子、5话题
		Rank       int64  `json:"rank"`        // 排序
	}

	updateGroupReq {
		Id         int64  `json:"id"`                   // 自增主键
		Name       string `json:"name,optional"`        // 组名称
		CreateUser int64  `json:"create_user,optional"` // 创建者id
		Ico        string `json:"ico,optional"`         // 组图标
		Remark     string `json:"remark,optional"`      // 备注
		ParentId   int64  `json:"parent_id,optional"`   // 父级id
		GroupType  int64  `json:"group_type,optional"`  // 类型: 1部门、2用户组、3群组、4圈子、5话题
		Rank       int64  `json:"rank,optional"`        // 排序
		State      int64  `json:"state,optional"`       // 状态，-2删除，-1禁用，待审核0，启用1
	}
	Group {
		Id         int64  `json:"id"`          // 自增主键
		Name       string `json:"name"`        // 组名称
		CreateUser int64  `json:"create_user"` // 创建者id
		Ico        string `json:"ico"`         // 组图标
		Remark     string `json:"remark"`      // 备注
		ParentId   int64  `json:"parent_id"`   // 父级id
		GroupType  int64  `json:"group_type"`  // 类型: 1部门、2用户组、3群组、4圈子、5话题
		Rank       int64  `json:"rank"`        // 排序
		State      int64  `json:"state"`       // 状态，-2删除，-1禁用，待审核0，启用1
		CreateTime string `json:"create_time"` // 创建时间
		UpdateTime string `json:"update_time"` // 更新时间
	}

	// 查询列表结果
	GroupList {
		List     []*Group `json:"list"tag:"list"`                       // 数据列表
		Current  int64    `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
		PageSize int64    `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
		IsNext   bool     `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
		// total           int64        `json:"total"`  // 总数
	}
)

type (
	createUserGroupReq {
		UserId  int64 `json:"user_id"`  // 用户id
		GroupId int64 `json:"group_id"` // 组id
	}

	updateUserGroupReq {
		Id      int64 `json:"id"`                // 自增主键
		UserId  int64 `json:"user_id,optional"`  // 用户id
		GroupId int64 `json:"group_id,optional"` // 组id
		State   int64 `json:"state,optional"`    // 状态，-2删除，-1禁用，待审核0，启用1
	}
	UserGroup {
		Id         int64  `json:"id"`          // 自增主键
		UserId     int64  `json:"user_id"`     // 用户id
		GroupId    int64  `json:"group_id"`    // 组id
		State      int64  `json:"state"`       // 状态，-2删除，-1禁用，待审核0，启用1
		CreateTime string `json:"create_time"` // 创建时间
		UpdateTime string `json:"update_time"` // 更新时间
	}

	// 查询列表结果
	UserGroupList {
		List     []*UserGroup `json:"list"tag:"list"`                       // 数据列表
		Current  int64        `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
		PageSize int64        `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
		IsNext   bool         `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
		// total           int64        `json:"total"`  // 总数
	}
)

type (
	createFriendReq {
		ApplyUser   int64  `json:"apply_user"`   // 申请用户id
		ApplyDevice string `json:"apply_device"` // 申请设备id
		AcceptUser  int64  `json:"accept_user"`  // 接受用户id
		ApplyReason string `json:"apply_reason"` // 申请理由
		Extra       string `json:"extra"`        // 附加属性
	}

	updateFriendReq {
		Id          int64  `json:"id"`                    // 自增主键
		ApplyUser   int64  `json:"apply_user,optional"`   // 申请用户id
		ApplyDevice string `json:"apply_device,optional"` // 申请设备id
		AcceptUser  int64  `json:"accept_user,optional"`  // 接受用户id
		ApplyReason string `json:"apply_reason,optional"` // 申请理由
		Extra       string `json:"extra,optional"`        // 附加属性
		State       int64  `json:"state,optional"`        // 状态，-2：拉黑，-1：拒绝，0：申请中，1：同意
	}
	Friend {
		Id          int64  `json:"id"`           // 自增主键
		ApplyUser   int64  `json:"apply_user"`   // 申请用户id
		ApplyDevice string `json:"apply_device"` // 申请设备id
		AcceptUser  int64  `json:"accept_user"`  // 接受用户id
		ApplyReason string `json:"apply_reason"` // 申请理由
		Extra       string `json:"extra"`        // 附加属性
		State       int64  `json:"state"`        // 状态，-2：拉黑，-1：拒绝，0：申请中，1：同意
		CreateTime  string `json:"create_time"`  // 创建时间
		UpdateTime  string `json:"update_time"`  // 更新时间
	}

	// 查询列表结果
	FriendList {
		List     []*Friend `json:"list"tag:"list"`                       // 数据列表
		Current  int64     `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
		PageSize int64     `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
		IsNext   bool      `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
		// total           int64        `json:"total"`  // 总数
	}
)

type (
	createOfflineMsgReq {
		UserId     int64  `json:"user_id"`      // 用户id
		DeviceId   string `json:"device_id"`    // 设备id
		ObjectType int64  `json:"object_type"`  // 对象类型,1:friend；2：群组
		ObjectId   int64  `json:"object_id"`    // 对象id, friendId/groupId
		LastAckSeq int64  `json:"last_ack_seq"` // 最后确认序列号
		NewestSeq  int64  `json:"newest_seq"`   // 最新的消息序列号
	}

	updateOfflineMsgReq {
		Id         int64  `json:"id"`                    // 自增主键
		UserId     int64  `json:"user_id,optional"`      // 用户id
		DeviceId   string `json:"device_id,optional"`    // 设备id
		ObjectType int64  `json:"object_type,optional"`  // 对象类型,1:friend；2：群组
		ObjectId   int64  `json:"object_id,optional"`    // 对象id, friendId/groupId
		LastAckSeq int64  `json:"last_ack_seq,optional"` // 最后确认序列号
		NewestSeq  int64  `json:"newest_seq,optional"`   // 最新的消息序列号
		State      int64  `json:"state,optional"`        // 消息状态：-1撤回，0未处理，1已读
	}
	OfflineMsg {
		Id         int64  `json:"id"`           // 自增主键
		UserId     int64  `json:"user_id"`      // 用户id
		DeviceId   string `json:"device_id"`    // 设备id
		ObjectType int64  `json:"object_type"`  // 对象类型,1:friend；2：群组
		ObjectId   int64  `json:"object_id"`    // 对象id, friendId/groupId
		LastAckSeq int64  `json:"last_ack_seq"` // 最后确认序列号
		NewestSeq  int64  `json:"newest_seq"`   // 最新的消息序列号
		State      int64  `json:"state"`        // 消息状态：-1撤回，0未处理，1已读
		CreateTime string `json:"create_time"`  // 创建时间
		UpdateTime string `json:"update_time"`  // 更新时间
	}

	// 查询列表结果
	OfflineMsgList {
		List     []*OfflineMsg `json:"list"tag:"list"`                       // 数据列表
		Current  int64         `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
		PageSize int64         `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
		IsNext   bool          `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
		// total           int64        `json:"total"`  // 总数
	}
)

type (
	createSingleMsgReq {
		Seq              int64  `json:"seq"`                // 消息序列号,每个单聊都维护一个消息序列号
		SenderType       int64  `json:"sender_type"`        // 发送者类型：1朋友，2打招呼，3转发
		SenderId         int64  `json:"sender_id"`          // 发送者id
		SenderDeviceId   string `json:"sender_device_id"`   // 发送设备id
		ReceiverId       int64  `json:"receiver_id"`        // 接收者id(friendId)
		ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
		MsgType          int64  `json:"msg_type"`           // 消息类型：0文本、1图文、2语音、3视频、4链接
		Content          string `json:"content"`            // 消息内容
		ParentId         int64  `json:"parent_id"`          // 父级id，引用功能
		SendTime         string `json:"send_time"`          // 消息发送时间
	}

	updateSingleMsgReq {
		Id               int64  `json:"id"`                          // 自增主键
		Seq              int64  `json:"seq,optional"`                // 消息序列号,每个单聊都维护一个消息序列号
		SenderType       int64  `json:"sender_type,optional"`        // 发送者类型：1朋友，2打招呼，3转发
		SenderId         int64  `json:"sender_id,optional"`          // 发送者id
		SenderDeviceId   string `json:"sender_device_id,optional"`   // 发送设备id
		ReceiverId       int64  `json:"receiver_id,optional"`        // 接收者id(friendId)
		ReceiverDeviceId string `json:"receiver_device_id,optional"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
		MsgType          int64  `json:"msg_type,optional"`           // 消息类型：0文本、1图文、2语音、3视频、4链接
		Content          string `json:"content,optional"`            // 消息内容
		ParentId         int64  `json:"parent_id,optional"`          // 父级id，引用功能
		SendTime         string `json:"send_time,optional"`          // 消息发送时间
		State            int64  `json:"state,optional"`              // 消息状态：-1撤回，0未处理，1已读
	}
	SingleMsg {
		Id               int64  `json:"id"`                 // 自增主键
		Seq              int64  `json:"seq"`                // 消息序列号,每个单聊都维护一个消息序列号
		SenderType       int64  `json:"sender_type"`        // 发送者类型：1朋友，2打招呼，3转发
		SenderId         int64  `json:"sender_id"`          // 发送者id
		SenderDeviceId   string `json:"sender_device_id"`   // 发送设备id
		ReceiverId       int64  `json:"receiver_id"`        // 接收者id(friendId)
		ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
		MsgType          int64  `json:"msg_type"`           // 消息类型：0文本、1图文、2语音、3视频、4链接
		Content          string `json:"content"`            // 消息内容
		ParentId         int64  `json:"parent_id"`          // 父级id，引用功能
		SendTime         string `json:"send_time"`          // 消息发送时间
		State            int64  `json:"state"`              // 消息状态：-1撤回，0未处理，1已读
		CreateTime       string `json:"create_time"`        // 创建时间
		UpdateTime       string `json:"update_time"`        // 更新时间
	}

	// 查询列表结果
	SingleMsgList {
		List     []*SingleMsg `json:"list"tag:"list"`                       // 数据列表
		Current  int64        `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
		PageSize int64        `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
		IsNext   bool         `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
		// total           int64        `json:"total"`  // 总数
	}
)

type (
	createGroupMsgReq {
		Seq              int64  `json:"seq"`                // 消息序列号,每个单聊都维护一个消息序列号
		SenderType       int64  `json:"sender_type"`        // 发送者类型：1群内，2转发
		SenderId         int64  `json:"sender_id"`          // 发送者id
		SenderDeviceId   string `json:"sender_device_id"`   // 发送设备id
		ReceiverId       int64  `json:"receiver_id"`        // 接收者id(group_id)
		ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
		AtUserIds        string `json:"at_user_ids"`        // 需要@的用户id列表，多个用户用@隔开
		MsgType          int64  `json:"msg_type"`           // 消息类型：0文本、1图文、2语音、3视频、地址、4链接
		Content          string `json:"content"`            // 消息内容
		ParentId         int64  `json:"parent_id"`          // 父级id，引用功能
		SendTime         string `json:"send_time"`          // 消息发送时间
	}

	updateGroupMsgReq {
		Id               int64  `json:"id"`                          // 自增主键
		Seq              int64  `json:"seq,optional"`                // 消息序列号,每个单聊都维护一个消息序列号
		SenderType       int64  `json:"sender_type,optional"`        // 发送者类型：1群内，2转发
		SenderId         int64  `json:"sender_id,optional"`          // 发送者id
		SenderDeviceId   string `json:"sender_device_id,optional"`   // 发送设备id
		ReceiverId       int64  `json:"receiver_id,optional"`        // 接收者id(group_id)
		ReceiverDeviceId string `json:"receiver_device_id,optional"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
		AtUserIds        string `json:"at_user_ids,optional"`        // 需要@的用户id列表，多个用户用@隔开
		MsgType          int64  `json:"msg_type,optional"`           // 消息类型：0文本、1图文、2语音、3视频、地址、4链接
		Content          string `json:"content,optional"`            // 消息内容
		ParentId         int64  `json:"parent_id,optional"`          // 父级id，引用功能
		SendTime         string `json:"send_time,optional"`          // 消息发送时间
		State            int64  `json:"state,optional"`              // 消息状态，-3接收者删除，-2发送者删除，-1撤回，0未处理，1已读
	}
	GroupMsg {
		Id               int64  `json:"id"`                 // 自增主键
		Seq              int64  `json:"seq"`                // 消息序列号,每个单聊都维护一个消息序列号
		SenderType       int64  `json:"sender_type"`        // 发送者类型：1群内，2转发
		SenderId         int64  `json:"sender_id"`          // 发送者id
		SenderDeviceId   string `json:"sender_device_id"`   // 发送设备id
		ReceiverId       int64  `json:"receiver_id"`        // 接收者id(group_id)
		ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
		AtUserIds        string `json:"at_user_ids"`        // 需要@的用户id列表，多个用户用@隔开
		MsgType          int64  `json:"msg_type"`           // 消息类型：0文本、1图文、2语音、3视频、地址、4链接
		Content          string `json:"content"`            // 消息内容
		ParentId         int64  `json:"parent_id"`          // 父级id，引用功能
		SendTime         string `json:"send_time"`          // 消息发送时间
		State            int64  `json:"state"`              // 消息状态，-3接收者删除，-2发送者删除，-1撤回，0未处理，1已读
		CreateTime       string `json:"create_time"`        // 创建时间
		UpdateTime       string `json:"update_time"`        // 更新时间
	}

	// 查询列表结果
	GroupMsgList {
		List     []*GroupMsg `json:"list"tag:"list"`                       // 数据列表
		Current  int64       `json:"current"tag:"uint"min:"1"max:"10"`     // 当前页
		PageSize int64       `json:"pageSize"tag:"uint"content:"10|20"`    // 页面大小
		IsNext   bool        `json:"isNext"tag:"char"content:"true|false"` // 是否有下一页
		// total           int64        `json:"total"`  // 总数
	}
)

@server(
	prefix: admin/Group/v1
	group: Group
	module: Group  //SingleMsg
)
service project {
	@doc (
		summary:创建
		handlerType:create
	)
	@handler Create
	post /create(createGroupReq)
	
	@doc (
		summary:更新
		handlerType:update
	)
	@handler Update
	put /update(updateGroupReq)
	
	@doc (
		summary:删除
		handlerType:delete
	)
	@handler Delete
	delete /delete(DeleteReq)
	
	@doc (
		summary:查询一个
		handlerType:get
	)
	@handler Get
	get /get(GetReq) returns(Group)
	
	@doc (
		summary:查询列表
		handlerType:gets
	)
	@handler Gets
	post /gets(GetsReq) returns(GroupList)
}

@server(
	prefix: admin/UserGroup/v1
	group: UserGroup
	module: UserGroup  //SingleMsg
)
service project {
	@doc (
		summary:创建
		handlerType:create
	)
	@handler Create
	post /create(createUserGroupReq)
	
	@doc (
		summary:更新
		handlerType:update
	)
	@handler Update
	put /update(updateUserGroupReq)
	
	@doc (
		summary:删除
		handlerType:delete
	)
	@handler Delete
	delete /delete(DeleteReq)
	
	@doc (
		summary:查询一个
		handlerType:get
	)
	@handler Get
	get /get(GetReq) returns(UserGroup)
	
	@doc (
		summary:查询列表
		handlerType:gets
	)
	@handler Gets
	post /gets(GetsReq) returns(UserGroupList)
}

@server(
	prefix: admin/Friend/v1
	group: Friend
	module: Friend  //SingleMsg
)
service project {
	@doc (
		summary:创建
		handlerType:create
	)
	@handler Create
	post /create(createFriendReq)
	
	@doc (
		summary:更新
		handlerType:update
	)
	@handler Update
	put /update(updateFriendReq)
	
	@doc (
		summary:删除
		handlerType:delete
	)
	@handler Delete
	delete /delete(DeleteReq)
	
	@doc (
		summary:查询一个
		handlerType:get
	)
	@handler Get
	get /get(GetReq) returns(Friend)
	
	@doc (
		summary:查询列表
		handlerType:gets
	)
	@handler Gets
	post /gets(GetsReq) returns(FriendList)
}

@server(
	prefix: admin/OfflineMsg/v1
	group: OfflineMsg
	module: OfflineMsg  //SingleMsg
)
service project {
	@doc (
		summary:创建
		handlerType:create
	)
	@handler Create
	post /create(createOfflineMsgReq)
	
	@doc (
		summary:更新
		handlerType:update
	)
	@handler Update
	put /update(updateOfflineMsgReq)
	
	@doc (
		summary:删除
		handlerType:delete
	)
	@handler Delete
	delete /delete(DeleteReq)
	
	@doc (
		summary:查询一个
		handlerType:get
	)
	@handler Get
	get /get(GetReq) returns(OfflineMsg)
	
	@doc (
		summary:查询列表
		handlerType:gets
	)
	@handler Gets
	post /gets(GetsReq) returns(OfflineMsgList)
}

@server(
	prefix: admin/SingleMsg/v1
	group: SingleMsg
	module: SingleMsg  //SingleMsg
)
service project {
	@doc (
		summary:创建
		handlerType:create
	)
	@handler Create
	post /create(createSingleMsgReq)
	
	@doc (
		summary:更新
		handlerType:update
	)
	@handler Update
	put /update(updateSingleMsgReq)
	
	@doc (
		summary:删除
		handlerType:delete
	)
	@handler Delete
	delete /delete(DeleteReq)
	
	@doc (
		summary:查询一个
		handlerType:get
	)
	@handler Get
	get /get(GetReq) returns(SingleMsg)
	
	@doc (
		summary:查询列表
		handlerType:gets
	)
	@handler Gets
	post /gets(GetsReq) returns(SingleMsgList)
}

@server(
	prefix: admin/GroupMsg/v1
	group: GroupMsg
	module: GroupMsg  //SingleMsg
)
service project {
	@doc (
		summary:创建
		handlerType:create
	)
	@handler Create
	post /create(createGroupMsgReq)
	
	@doc (
		summary:更新
		handlerType:update
	)
	@handler Update
	put /update(updateGroupMsgReq)
	
	@doc (
		summary:删除
		handlerType:delete
	)
	@handler Delete
	delete /delete(DeleteReq)
	
	@doc (
		summary:查询一个
		handlerType:get
	)
	@handler Get
	get /get(GetReq) returns(GroupMsg)
	
	@doc (
		summary:查询列表
		handlerType:gets
	)
	@handler Gets
	post /gets(GetsReq) returns(GroupMsgList)
}