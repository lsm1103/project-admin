// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"

	"project-admin/common/sqlUtils"
)

var (
	projectFieldNames          = builder.RawFieldNames(&Project{})
	projectRows                = strings.Join(projectFieldNames, ",")
	projectRowsExpectAutoSet   = strings.Join(stringx.Remove(projectFieldNames, "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`state`"), ",")
	projectRowsWithPlaceHolder = strings.Join(stringx.Remove(projectFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"
	projectListRows            = strings.Join(builder.RawFieldNames(&Project{}), ",")

	cacheProjectIdPrefix                        = "cache:project:id:"
	cacheProjectCreateUserNameProjectTypePrefix = "cache:project:createUser:name:projectType:"
)

type (
	projectModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Project) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64, resp interface{}) (err error)
		FindOneByCreateUserNameProjectType(ctx context.Context, createUser int64, name string, projectType int64) (*Project, error)
		Update(ctx context.Context, session sqlx.Session, data *Project) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultProjectModel struct {
		sqlc.CachedConn
		table string
	}

	Project struct {
		Id          int64     `db:"id"`           // 主键
		Name        string    `db:"name"`         // 名称
		Ico         string    `db:"ico"`          // 图标
		Info        string    `db:"info"`         // 简介
		ProjectType int64     `db:"project_type"` // 类型: 1编程、2其他
		CreateUser  int64     `db:"create_user"`  // 创建者id
		JoinUsers   string    `db:"join_users"`   // 参与者ids
		JoinGroups  string    `db:"join_groups"`  // 参与组ids
		Remark      string    `db:"remark"`       // 备注
		Rank        int64     `db:"rank"`         // 排序
		State       int64     `db:"state"`        // 状态，-2删除，-1禁用，待审核0，启用1
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 更新时间
	}
)

func newProjectModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProjectModel {
	return &defaultProjectModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`project`",
	}
}

func (m *defaultProjectModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data := &Project{}
	err := m.FindOne(ctx, session, id, data)
	if err != nil {
		return err
	}
	projectCreateUserNameProjectTypeKey := fmt.Sprintf("%s%v:%v:%v", cacheProjectCreateUserNameProjectTypePrefix, data.CreateUser, data.Name, data.ProjectType)
	projectIdKey := fmt.Sprintf("%s%v", cacheProjectIdPrefix, id)

	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, projectCreateUserNameProjectTypeKey, projectIdKey)
	return err
}

func (m *defaultProjectModel) FindOne(ctx context.Context, session sqlx.Session, id int64, resp interface{}) (err error) {
	projectIdKey := fmt.Sprintf("%s%v", cacheProjectIdPrefix, id)
	err = m.QueryRowCtx(ctx, resp, projectIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", projectRows, m.table)
		if session != nil {
			return session.QueryRowCtx(ctx, v, query, id)
		}
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return nil
	case sqlc.ErrNotFound:
		return sqlUtils.ErrNotFound
	default:
		return err
	}
}

func (m *defaultProjectModel) FindOneByCreateUserNameProjectType(ctx context.Context, createUser int64, name string, projectType int64) (*Project, error) {
	projectCreateUserNameProjectTypeKey := fmt.Sprintf("%s%v:%v:%v", cacheProjectCreateUserNameProjectTypePrefix, createUser, name, projectType)
	var resp Project
	err := m.QueryRowIndexCtx(ctx, &resp, projectCreateUserNameProjectTypeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `create_user` = ? and `name` = ? and `project_type` = ? limit 1", projectRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, createUser, name, projectType); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlUtils.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProjectModel) Insert(ctx context.Context, session sqlx.Session, data *Project) (sql.Result, error) {
	projectCreateUserNameProjectTypeKey := fmt.Sprintf("%s%v:%v:%v", cacheProjectCreateUserNameProjectTypePrefix, data.CreateUser, data.Name, data.ProjectType)
	projectIdKey := fmt.Sprintf("%s%v", cacheProjectIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, projectRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.Name, data.Ico, data.Info, data.ProjectType, data.CreateUser, data.JoinUsers, data.JoinGroups, data.Remark, data.Rank)
		}
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Ico, data.Info, data.ProjectType, data.CreateUser, data.JoinUsers, data.JoinGroups, data.Remark, data.Rank)
	}, projectCreateUserNameProjectTypeKey, projectIdKey)
	return ret, err
}

func (m *defaultProjectModel) Update(ctx context.Context, session sqlx.Session, data *Project) error {
	err := m.FindOne(ctx, session, data.Id, &Project{})
	if err != nil {
		return err
	}
	projectCreateUserNameProjectTypeKey := fmt.Sprintf("%s%v:%v:%v", cacheProjectCreateUserNameProjectTypePrefix, data.CreateUser, data.Name, data.ProjectType)
	projectIdKey := fmt.Sprintf("%s%v", cacheProjectIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, strings.Join(sqlUtils.BuildFields(data, sqlUtils.IsEmptyValue), ", "))
		if session != nil {
			return session.Exec(query, data.Id)
		}
		return conn.Exec(query, data.Id)
	}, projectCreateUserNameProjectTypeKey, projectIdKey)
	return err
}

func (m *defaultProjectModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheProjectIdPrefix, primary)
}

func (m *defaultProjectModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", projectRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProjectModel) tableName() string {
	return m.table
}
